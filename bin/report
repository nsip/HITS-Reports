#!/usr/bin/perl
use perl5i::2;
use YAML;
use DBI;
use Data::Dumper;
use HITS::Report::Rules;

# ----------------------------------------------------------------------
# What rules and template
my ($app_template_id, $rulefile) = @ARGV;

# ----------------------------------------------------------------------
# READ Rules (XXX JSON)
my $rules = do $rulefile;
if ($@) {
	die "Can't load rules - $@";
}

# ----------------------------------------------------------------------
# READ Local configuraiton (database etc)
my $config = YAML::LoadFile($ENV{HOME} . "/.nsip_sif_data");
my $dbh = DBI->connect(
	$config->{mysql_dsn_hits}, 
	$config->{mysql_user}, 
	$config->{mysql_password},
	{RaiseError => 1, AutoCommit => 1}
);

# ----------------------------------------------------------------------
# Local output report
my $report = {
	title => $rules->{title},
	description => $rules->{description},
	# Details about the application
	application => {
	},
	tests => [],
};

# ----------------------------------------------------------------------
# Common code - move to library
# ----------------------------------------------------------------------
my $sth1 = $dbh->prepare(q{
select * from app_login});
$sth1->execute();
my $app1 = $sth1->fetchall_arrayref;

my $sth = $dbh->prepare(q{
	SELECT 
		app.name app_name, app.title app_title,				-- Application
		app.sis_id, sis.sis_type, sis.sis_ref,				-- SIS
		vendor.id vendor_id, vendor.name vendor_name		-- Vendor
	FROM 
		app_login, app, vendor, sis
	WHERE 
		app_login.app_template_id = ?
		AND app.id = app_login.app_id
		AND vendor.id = app.vendor_id
		AND sis.id = app.sis_id
});
$sth->execute($app_template_id);
my $app = $sth->fetchrow_hashref;

if (!$app) {
	die "No valid match for app_template_id - $app_template_id\n";
}

$report->{application} = $app;

# ----------------------------------------------------------------------
# Student Information System DATABASE
# ----------------------------------------------------------------------
my $dsn = $config->{mysql_dsn_template};
my $db = $app->{sis_ref};
$dsn =~ s/TEMPLATE/$db/;
my $dbh_sis = DBI->connect(
		$dsn,
		$config->{mysql_user}, 
		$config->{mysql_password},
		{RaiseError => 1, AutoCommit => 1}
);

my $re = HITS::Report::Rules->new($dbh_sis);


# ----------------------------------------------------------------------
# TESTS
# ----------------------------------------------------------------------
my $count = 0;
foreach my $test (@{$rules->{tests}}) {
	# confirm that all the tables exist
	my $tablesexist = 1;
	foreach my $t (@{$test->{tables}}) {
		my $query = sprintf "SHOW TABLES LIKE '%s';", $t;
                my $tabletest = $dbh_sis->prepare($query);
                $tabletest->execute();
		my $row = $tabletest->fetchrow_hashref;
                $tablesexist=0 unless ($row);
	}
	next unless $tablesexist;


	# TODO - how to do restrictions for School etc !
	my $sth = $dbh_sis->prepare($test->{query});
	$sth->execute();

	my $entry = {
		id => $test->{id},
		title => $test->{title},
		description => $test->{description},
		subtests => $test->{subtests},
		rawdata => [],
		result => '',
		weight => $test->{weight},
		score => 0,
		errors => [],
	};

	# Top level rule implemented here

	my $count = 0;
	while (my $row = $sth->fetchrow_hashref) {
		$count++;
		foreach my $st ( @{$test->{subtests}} ) {
			my ($sub, $data) = split(/:/, $st->{rule}, 2);
			eval {
				$re->$sub($row, $data);
			};
			if ($@) {
				push @{$entry->{errors}}, {
					subtest => $st->{id},
					data => $row,
					details => $@ . "",
				};
			}
		}
	}

	# XXX Move these to class?
	if (! exists $test->{rule}) {
		# Do nothing
	}
	elsif ( $test->{rule} eq 'zero' ) {
		print "ZERO $count\n";
		if ($count) {
			push @{$entry->{errors}}, {
				subtest => '0',
				details => "Should be no rows, currently $count",
			};
		}
	}
	elsif ( $test->{rule} =~ /^morethan:(\d+)$/) {
		my $exp = $1;
		if ($count <= $exp) {
			push @{$entry->{errors}}, {
				subtest => '0',
				details => "Should be more than $exp rows, currently $count",
			};
		}
	}
	else {
		die "Invalid rule = $test->{rule}\n";
	}

	# Rough score calculation
	my $score = 100 - scalar(@{$entry->{errors}});
	if ($score < 1) { $score = 0 };
	$entry->{score} = $score;

	push @{$report->{tests}}, $entry;
}

# ----------------------------------------------------------------------
# Calculations
# ----------------------------------------------------------------------
my $total = 0;
my $score = 0;
foreach my $t ( @{$report->{tests}}) {
	$total += 100 * $t->{weight};
	$score += $t->{score} * $t->{weight};
}
$report->{score} = {
	score => int($score),
	total => int($total),
	percent => $total == 0 ? 0 : int($score / $total * 100),
};

# XXX JSON output
print Dumper($report);

