#!/usr/bin/perl
use perl5i::2;
use YAML;
use DBI;
use Data::Dumper;

# ----------------------------------------------------------------------
# What rules and template
my ($app_template_id, $rules) = @ARGV;

# ----------------------------------------------------------------------
# READ Rules

# ----------------------------------------------------------------------
# READ Local configuraiton (database etc)
my $config = YAML::LoadFile($ENV{HOME} . "/.nsip_sif_data");
my $dbh = DBI->connect(
	$config->{mysql_dsn_hits}, 
	$config->{mysql_user}, 
	$config->{mysql_password},
	{RaiseError => 1, AutoCommit => 1}
);

# ----------------------------------------------------------------------
# Local output report
my $report = {
	# Details about the application
	application => {
	},
	tests => [],
};

# ----------------------------------------------------------------------
# Common code - move to library
# ----------------------------------------------------------------------
my $sth = $dbh->prepare(q{
	SELECT 
		app.name app_name, app.title app_title,				-- Application
		app.sis_id, sis.sis_type, sis.sis_ref,				-- SIS
		vendor.id vendor_id, vendor.name vendor_name		-- Vendor
	FROM 
		app_login, app, vendor, sis
	WHERE 
		app_login.app_template_id = ?
		AND app.id = app_login.app_id
		AND vendor.id = app.vendor_id
		AND sis.id = app.sis_id
});
$sth->execute($app_template_id);
my $app = $sth->fetchrow_hashref;

if (!$app) {
	die "No valid match for app_template_id - $app_template_id\n";
}

$report->{application} = $app;

# ----------------------------------------------------------------------
# Student Information System DATABASE
# ----------------------------------------------------------------------
my $dsn = $config->{mysql_dsn_template};
my $db = $app->{sis_ref};
$dsn =~ s/TEMPLATE/$db/;
my $dbh_sis = DBI->connect(
		$dsn,
		$config->{mysql_user}, 
		$config->{mysql_password},
		{RaiseError => 1, AutoCommit => 1}
);

# ----------------------------------------------------------------------
# LOAD LOOKUPS
# ----------------------------------------------------------------------
my $lookupref = {};
foreach my $t (qw/
	StaffPersonal 
	TeachingGroup
    SchoolInfo
    TimeTableSubject
    TimeTableCell
    ScheduledActivity
    StudentPersonal
    RoomInfo
    TimeTable
/) {
	$lookupref->{$t} = {};
	my $lsth = $dbh_sis->prepare("SELECT RefId FROM $t");
	$lsth->execute;
	while (my $ref = $lsth->fetchrow_hashref) {
		$lookupref->{$t}{$ref->{RefId}} = 1;
	}
}

# ----------------------------------------------------------------------
# TEST 1 - TeachingGroups
# ----------------------------------------------------------------------

# Method 1 - Do the join expect failure based on missing data
#	GOOD: Easy to write the queries
# 	BAD: Can't report then the problems to the users
# Method 2 - Do individual queries
#	GOOD: Can report individual problems (e.g. X RefId does not exist)
#	BAD: Harder to write the code, slower to execute

{
	my @errors = ();

	# GET COUNTS (XXX this only works if at least ONE teacher and ONE student - FIX !!!)
	$sth = $dbh_sis->prepare(q{
		SELECT
			tg.RefId, tg.ShortName,
			count(tgs.StudentPersonal_RefId) as count_student,
			count(tgt.StaffPersonal_RefId) as count_teacher
		FROM
			TeachingGroup tg, TeachingGroup_Student tgs, TeachingGroup_Teacher tgt
			-- TODO consider joining to StudentPersonal and StaffPersonal to check refs
		WHERE
			tgs.TeachingGroup_RefId = tg.RefId
			AND tgt.TeachingGroup_RefId = tg.RefId
		GROUP BY
			tg.RefId, tg.ShortName
	});
	$sth->execute();
	my $counts = {};
	while (my $ref = $sth->fetchrow_hashref) {
		$counts->{$ref->{RefId}} = { %$ref };
	}

	# Raw Data
	$sth = $dbh_sis->prepare(q{SELECT * FROM TeachingGroup});
	$sth->execute();
	my @rawdata = ();
	while (my $ref = $sth->fetchrow_hashref) {
		my $local = { %$ref };	# Copy local object (ref reused)
		$local->{count_student} = $counts->{$ref->{RefId}}{count_student};
		$local->{count_teacher} = $counts->{$ref->{RefId}}{count_teacher};

		# TEST 1.1 - SchoolInfo valid
		if ( ! $lookupref->{SchoolInfo}{$ref->{SchoolInfo_RefId}} ) {
			push @errors, {
				subtest => 1,
				details => "TeachingGroup/$ref->{RefId} invalid SchoolInfoRefId or doesn't exist (SchoolInfo/$ref->{SchoolInfo_RefId})",
			};
		}

		# TEST 1.2 - Students exist
		if (! $local->{count_student}) {
			push @errors, {
				subtest => 2,
				details => "TeachingGroup/$ref->{RefId} has no students",
			};
		}

		# TEST 1.3 - Teachers Exist
		if (! $local->{count_teacher}) {
			push @errors, {
				subtest => 3,
				details => "TeachingGroup/$ref->{RefId} has no teachers",
			};
		}

		# TEST 1.4 - KLA
		if (! $local->{KLA} ) {
			push @errors, {
				subtest => 4,
				details => "TeachingGroup/$ref->{RefId} KLA is missing",
			};
		}
		
		push @rawdata, $local;
	}

	my $score = 100 - scalar(@errors);
	if ($score < 1) { $score = 0 };

	# Subtests - count errors
	my $subtests = [
		{id => 1, title => 'Validate SchoolInfoRefId exists in local system'},
		{id => 2, title => 'Check number of students'},
		{id => 3, title => 'Check number of teachers'},
		{id => 4, title => 'Invalid KLA'},
	];
	foreach my $st (@{$subtests}) {
		my $count = 0;
		foreach my $e (@errors) {
			if ($e->{subtest} == $st->{id}) {
				$count++;
			}
		}
		$st->{errors} = $count;
	}

	push @{$report->{tests}}, {
		id => 1,
		title => 'TeachingGroups Filled',
		description => 'Details on how this test is done',
		subtests => $subtests,
		rawdata => \@rawdata,
		result => '',
		weight => 1,	# Weight for score calculation
		score => $score,		# Score (0-100)
		errors => \@errors,
	};
}


# ----------------------------------------------------------------------
# TEST 2 - TimeTableCell
# ----------------------------------------------------------------------
{
	$sth = $dbh_sis->prepare(q{
		SELECT
			ttc.RefId,
			tt.RefId as TimeTable_RefId,		-- Join each for checking
			tg.RefId as TeachingGroup_RefId,	
			ri.RefId as RoomInfo_RefId
		FROM
			TimeTableCell ttc,
			TimeTable tt,
			TeachingGroup tg,
			RoomInfo ri
		WHERE
			tt.RefId = ttc.TimeTable_RefId
			AND tg.RefId = ttc.TeachingGroup_RefId
			AND ri.RefId = ttc.RoomInfo_RefId
	});
	$sth->execute();

	my $summary = {};
	push @{$report->{tests}}, {
		id => 2,
		title => 'TimeTableCell Filled',
		description => 'Details on how this test is done',
		rawdata => $sth->fetchall_arrayref({}),
		result => '',
		weight => 1,	# Weight for score calculation
		score => 0,		# Score (0-100)
		summary => $summary,
	};
}


# ----------------------------------------------------------------------
# Calculations
# ----------------------------------------------------------------------
my $total = 0;
my $score = 0;
foreach my $t ( @{$report->{tests}}) {
	$total += 100 * $t->{weight};
	$score += $t->{score} * $t->{weight};
}
$report->{score} = {
	score => $score,
	total => $total,
};

print Dumper($report);


__END__

Test 1 - Teaching Groups
	The payload contains n TeachingGroup? objects (n>0)

Test 2 - TimeTableCell
	The payload contains n TimeTableCell? objects (n>0)

Test 3 - Scheduled Activity
	The payload contains n ScheduledActivity? objects (n>0)

Test 4 - TimeTable
	The payload contains n TimeTable? objects (n>0)

COMMON
	There are n SchoolInfo? links in the payload (n>=1)
	All SchoolInfo? links in the payload are to Objects provided by HITS to the client
	There are n StudentPersonal? links in the payload (n>=1)
	All StudentPersonal? links in the payload are to Objects provided by HITS to the client
	There are n StaffPersonal? links in the payload (n>=1)
	All StaffPersonal? links in the payload are to Objects provided by HITS to the client
	There are n RoomInfo? links in the payload (n>=1)
	All RoomInfo? links in the payload are to Objects provided by HITS to the client
	There are n TimeTableSubject? links in the payload (n>=1)
	All TimeTableSubject? links in the payload are to Objects provided by HITS to the client

Note: We do not expect every instance of SchoolInfo?, StudentPersonal?, StaffPersonal?, RoomInfo?, TimeTableSubject? provided by HITS to be referenced by the returned objects. We are not testing for the completeness of timetabling software running over provisioned data, but only for the validity of the SIF payload they generate

Each instance of TimeTable? links to a School (Warning if it does not)

For each instance of TimeTable? linked to a School, TimeTable/SchoolLocalId? matches SchoolInfo/LocalId?, and TimeTable/SchoolName? matches SchoolInfo/SchoolName?, for that school (if provided)

Each instance of TeachingGroup? links to a School (Warning if it does not)

For each instance of TeachingGroup? linked to a School, TeachingGroup/SchoolLocalId? matches SchoolInfo/LocalId? (if provided)

Each instance of TeachingGroup? links to a TimeTable? Subject (warning if it does not)

For each instance of TeachingGroup? linked to a TimeTable? Subject, TeachingGroup/TimeTableSubjectLocalId? matches TimeTableSubject/LocalId? (if provided)

Each instance of TeachingGroup? links to n Students

For each instance of TeachingGroup? linked to a Student, TeachingGroup/StudentList/TeachingGroupStudent/StudentLocalId? matches StudentPersonal/LocalId?, and TeachingGroup/StudentList/TeachingGroupStudent/PersonInfo/Name? matches StudentPersonal/Name?

Each instance of TeachingGroup? links to n Staff (Warning if it does not)

For each instance of TeachingGroup? linked to a Staff, TeachingGroup/TeacherList/TeachingGroupTeacher/StaffLocalId? matches StaffPersonal/LocalId?, and TeachingGroup/TeacherList/TeachingGroupTeacher/PersonInfo/Name? matches StudentPersonal/Name?

Each instance of TeachingGroup? links to n Rooms (Warning if it does not)

For each instance of TeachingGroup? linked to a Room, TeachingGroup/TeachingGroupPeriodList/TeachingGroupPeriod/RoomNumber? matches RoomInfo/RoomNumber? (if provided)

Each instance of TimeTable? Cell links to a Timetable

Each instance of TimeTable? Cell links to a Timetable Subject

For each instance of TimeTable? Cell linked to a Timetable Subject, TimeTableCell/SubjectLocalId? matches TimeTableSubject/LocalId? (if provided)

Each instance of TimeTable? Cell links to a Teaching Group

For each instance of TimeTable? Cell linked to a TeachingGroup?, TimeTableCell/TeachingGroupLocalId? matches TeachingGroup/LocalId? (if provided)

Each instance of TimeTable? Cell links to a Room

For each instance of TimeTable? Cell linked to a Room, TimeTableCell/RoomNumber? matches RoomInfo/RoomNumber? (if provided)

Each instance of TimeTable? Cell may link to a Staff (Warning if it does not)

For each instance of TimeTable? Cell linked to a Staff, TimeTableCell/StaffLocalId? matches StaffPersonal/LocalId? (if provided)

Each instance of TimeTable? Cell may link to a School (Warning if it does not)

For each instance of TimeTable? Cell linked to a School, TimeTableCell/SchoolLocalId? matches SchoolInfo/LocalId? (if provided)

Each ScheduledActivity? provided is a dated instance of a TimeTableCell? object

[rule: ScheduledActivity/DayId? = TimeTableCell/DayId?

ScheduledActivity/PeriodId? = TimeTableCell/PeriodId?

ScheduledActivity/TimeTableRefId? = TimeTableCell/TimeTableRefId?

ScheduledActivity/Rooms/RoomInfoRefId? = TimeTableCell/RoomInfoRefId?

ScheduledActivity/TimeTableSubjectRefId? = TimeTableCell/TimeTableSubectRefId?

ScheduledActivity/TeachingGroup/TeachingGroupRefId? = TimeTableCell/TeachingGroupRefId?

ScheduledActivity/Teachers/TeacherCover/StaffPersonalRefId? = TimeTableCell/StaffPersonalRefId?]

