#!/usr/bin/perl
use perl5i::2;
use YAML;
use DBI;
use Data::Dumper;
use HITS::Report::Rules;

# ----------------------------------------------------------------------
# What rules and template
my ($app_template_id, $rulefile) = @ARGV;

# ----------------------------------------------------------------------
# READ Rules (XXX JSON)
my $rules = do $rulefile;
if ($@) {
	die "Can't load rules - $@";
}

# ----------------------------------------------------------------------
# READ Local configuraiton (database etc)
my $config = YAML::LoadFile($ENV{HOME} . "/.nsip_sif_data");
my $dbh = DBI->connect(
	$config->{mysql_dsn_hits}, 
	$config->{mysql_user}, 
	$config->{mysql_password},
	{RaiseError => 1, AutoCommit => 1}
);

# ----------------------------------------------------------------------
# Local output report
my $report = {
	# Details about the application
	application => {
	},
	tests => [],
};

# ----------------------------------------------------------------------
# Common code - move to library
# ----------------------------------------------------------------------
my $sth = $dbh->prepare(q{
	SELECT 
		app.name app_name, app.title app_title,				-- Application
		app.sis_id, sis.sis_type, sis.sis_ref,				-- SIS
		vendor.id vendor_id, vendor.name vendor_name		-- Vendor
	FROM 
		app_login, app, vendor, sis
	WHERE 
		app_login.app_template_id = ?
		AND app.id = app_login.app_id
		AND vendor.id = app.vendor_id
		AND sis.id = app.sis_id
});
$sth->execute($app_template_id);
my $app = $sth->fetchrow_hashref;

if (!$app) {
	die "No valid match for app_template_id - $app_template_id\n";
}

$report->{application} = $app;

# ----------------------------------------------------------------------
# Student Information System DATABASE
# ----------------------------------------------------------------------
my $dsn = $config->{mysql_dsn_template};
my $db = $app->{sis_ref};
$dsn =~ s/TEMPLATE/$db/;
my $dbh_sis = DBI->connect(
		$dsn,
		$config->{mysql_user}, 
		$config->{mysql_password},
		{RaiseError => 1, AutoCommit => 1}
);

my $re = HITS::Report::Rules->new($dbh_sis);


# ----------------------------------------------------------------------
# TESTS
# ----------------------------------------------------------------------
my $count = 0;
foreach my $test (@$rules) {
	# TODO - how to do restrictions for School etc !
	my $sth = $dbh_sis->prepare($test->{query});
	$sth->execute();

	my $entry = {
		id => $test->{id},
		title => $test->{title},
		description => $test->{description},
		subtests => [],
		rawdata => [],
		result => '',
		weight => $test->{weight},
		score => 0,
		errors => [],
	};

	while (my $row = $sth->fetchrow_hashref) {
		foreach my $st ( @{$test->{subtests}} ) {
			my ($sub, $data) = split(/:/, $st->{rule}, 2);
			eval {
				$re->$sub($row, $data);
			};
			if ($@) {
				push @{$entry->{errors}}, {
					subtest => $st->{id},
					data => $row,
					details => $@ . "",
				};
			}
		}
	}

	push @{$report->{tests}}, $entry;
}

# ----------------------------------------------------------------------
# Calculations
# ----------------------------------------------------------------------
my $total = 0;
my $score = 0;
foreach my $t ( @{$report->{tests}}) {
	$total += 100 * $t->{weight};
	$score += $t->{score} * $t->{weight};
}
$report->{score} = {
	score => $score,
	total => $total,
};

print Dumper($report);

__END__

Test 1 - Teaching Groups
	The payload contains n TeachingGroup? objects (n>0)

Test 2 - TimeTableCell
	The payload contains n TimeTableCell? objects (n>0)

Test 3 - Scheduled Activity
	The payload contains n ScheduledActivity? objects (n>0)

Test 4 - TimeTable
	The payload contains n TimeTable? objects (n>0)

COMMON
	There are n SchoolInfo? links in the payload (n>=1)
	All SchoolInfo? links in the payload are to Objects provided by HITS to the client
	There are n StudentPersonal? links in the payload (n>=1)
	All StudentPersonal? links in the payload are to Objects provided by HITS to the client
	There are n StaffPersonal? links in the payload (n>=1)
	All StaffPersonal? links in the payload are to Objects provided by HITS to the client
	There are n RoomInfo? links in the payload (n>=1)
	All RoomInfo? links in the payload are to Objects provided by HITS to the client
	There are n TimeTableSubject? links in the payload (n>=1)
	All TimeTableSubject? links in the payload are to Objects provided by HITS to the client

Note: We do not expect every instance of SchoolInfo?, StudentPersonal?, StaffPersonal?, RoomInfo?, TimeTableSubject? provided by HITS to be referenced by the returned objects. We are not testing for the completeness of timetabling software running over provisioned data, but only for the validity of the SIF payload they generate

Each instance of TimeTable? links to a School (Warning if it does not)

For each instance of TimeTable? linked to a School, TimeTable/SchoolLocalId? matches SchoolInfo/LocalId?, and TimeTable/SchoolName? matches SchoolInfo/SchoolName?, for that school (if provided)

Each instance of TeachingGroup? links to a School (Warning if it does not)

For each instance of TeachingGroup? linked to a School, TeachingGroup/SchoolLocalId? matches SchoolInfo/LocalId? (if provided)

Each instance of TeachingGroup? links to a TimeTable? Subject (warning if it does not)

For each instance of TeachingGroup? linked to a TimeTable? Subject, TeachingGroup/TimeTableSubjectLocalId? matches TimeTableSubject/LocalId? (if provided)

Each instance of TeachingGroup? links to n Students

For each instance of TeachingGroup? linked to a Student, TeachingGroup/StudentList/TeachingGroupStudent/StudentLocalId? matches StudentPersonal/LocalId?, and TeachingGroup/StudentList/TeachingGroupStudent/PersonInfo/Name? matches StudentPersonal/Name?

Each instance of TeachingGroup? links to n Staff (Warning if it does not)

For each instance of TeachingGroup? linked to a Staff, TeachingGroup/TeacherList/TeachingGroupTeacher/StaffLocalId? matches StaffPersonal/LocalId?, and TeachingGroup/TeacherList/TeachingGroupTeacher/PersonInfo/Name? matches StudentPersonal/Name?

Each instance of TeachingGroup? links to n Rooms (Warning if it does not)

For each instance of TeachingGroup? linked to a Room, TeachingGroup/TeachingGroupPeriodList/TeachingGroupPeriod/RoomNumber? matches RoomInfo/RoomNumber? (if provided)

Each instance of TimeTable? Cell links to a Timetable

Each instance of TimeTable? Cell links to a Timetable Subject

For each instance of TimeTable? Cell linked to a Timetable Subject, TimeTableCell/SubjectLocalId? matches TimeTableSubject/LocalId? (if provided)

Each instance of TimeTable? Cell links to a Teaching Group

For each instance of TimeTable? Cell linked to a TeachingGroup?, TimeTableCell/TeachingGroupLocalId? matches TeachingGroup/LocalId? (if provided)

Each instance of TimeTable? Cell links to a Room

For each instance of TimeTable? Cell linked to a Room, TimeTableCell/RoomNumber? matches RoomInfo/RoomNumber? (if provided)

Each instance of TimeTable? Cell may link to a Staff (Warning if it does not)

For each instance of TimeTable? Cell linked to a Staff, TimeTableCell/StaffLocalId? matches StaffPersonal/LocalId? (if provided)

Each instance of TimeTable? Cell may link to a School (Warning if it does not)

For each instance of TimeTable? Cell linked to a School, TimeTableCell/SchoolLocalId? matches SchoolInfo/LocalId? (if provided)

Each ScheduledActivity? provided is a dated instance of a TimeTableCell? object

[rule: ScheduledActivity/DayId? = TimeTableCell/DayId?

ScheduledActivity/PeriodId? = TimeTableCell/PeriodId?

ScheduledActivity/TimeTableRefId? = TimeTableCell/TimeTableRefId?

ScheduledActivity/Rooms/RoomInfoRefId? = TimeTableCell/RoomInfoRefId?

ScheduledActivity/TimeTableSubjectRefId? = TimeTableCell/TimeTableSubectRefId?

ScheduledActivity/TeachingGroup/TeachingGroupRefId? = TimeTableCell/TeachingGroupRefId?

ScheduledActivity/Teachers/TeacherCover/StaffPersonalRefId? = TimeTableCell/StaffPersonalRefId?]

